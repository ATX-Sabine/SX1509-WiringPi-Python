# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_SX1509')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_SX1509')
    _SX1509 = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_SX1509', [dirname(__file__)])
        except ImportError:
            import _SX1509
            return _SX1509
        try:
            _mod = imp.load_module('_SX1509', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _SX1509 = swig_import_helper()
    del swig_import_helper
else:
    import _SX1509
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SX1509(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SX1509, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SX1509, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _SX1509.new_SX1509()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def begin(self, address, resetPin):
        return _SX1509.SX1509_begin(self, address, resetPin)

    def reset(self, hardware):
        return _SX1509.SX1509_reset(self, hardware)

    def pinDir(self, pin, inOut):
        return _SX1509.SX1509_pinDir(self, pin, inOut)

    def writePin(self, pin, highLow):
        return _SX1509.SX1509_writePin(self, pin, highLow)

    def readPin(self, pin):
        return _SX1509.SX1509_readPin(self, pin)

    def ledDriverInit(self, pin, freq, log):
        return _SX1509.SX1509_ledDriverInit(self, pin, freq, log)

    def pwm(self, pin, iOn):
        return _SX1509.SX1509_pwm(self, pin, iOn)

    def blink(self, pin, tOn, tOff, rise, fall, onInt, offInt, log):
        return _SX1509.SX1509_blink(self, pin, tOn, tOff, rise, fall, onInt, offInt, log)

    def setupBlink(self, pin, tOn, tOff, onIntensity, offIntensity, tRise, tFall, log):
        return _SX1509.SX1509_setupBlink(self, pin, tOn, tOff, onIntensity, offIntensity, tRise, tFall, log)

    def keypad(self, rows, columns, sleepTime, scanTime, debounceTime):
        return _SX1509.SX1509_keypad(self, rows, columns, sleepTime, scanTime, debounceTime)

    def readKeyData(self):
        return _SX1509.SX1509_readKeyData(self)

    def getRow(self, keyData):
        return _SX1509.SX1509_getRow(self, keyData)

    def getCol(self, keyData):
        return _SX1509.SX1509_getCol(self, keyData)

    def sync(self):
        return _SX1509.SX1509_sync(self)

    def debounceConfig(self, configValue):
        return _SX1509.SX1509_debounceConfig(self, configValue)

    def debounceTime(self, time):
        return _SX1509.SX1509_debounceTime(self, time)

    def debounceEnable(self, pin):
        return _SX1509.SX1509_debounceEnable(self, pin)

    def debouncePin(self, pin):
        return _SX1509.SX1509_debouncePin(self, pin)

    def debounceKeypad(self, time, numRows, numCols):
        return _SX1509.SX1509_debounceKeypad(self, time, numRows, numCols)

    def enableInterrupt(self, pin, riseFall):
        return _SX1509.SX1509_enableInterrupt(self, pin, riseFall)

    def interruptSource(self, clear):
        return _SX1509.SX1509_interruptSource(self, clear)

    def clearInterrupt(self):
        return _SX1509.SX1509_clearInterrupt(self)

    def checkInterrupt(self, pin):
        return _SX1509.SX1509_checkInterrupt(self, pin)

    def configClock(self, oscSource, oscPinFunction, oscFreqOut, oscDivider):
        return _SX1509.SX1509_configClock(self, oscSource, oscPinFunction, oscFreqOut, oscDivider)
    __swig_destroy__ = _SX1509.delete_SX1509
    __del__ = lambda self: None
SX1509_swigregister = _SX1509.SX1509_swigregister
SX1509_swigregister(SX1509)

# This file is compatible with both classic and new-style classes.


